---
- name: Download Spark
  ansible.builtin.get_url:
    url: "https://archive.apache.org/dist/spark/spark-{{ spark_version }}/spark-{{ spark_version }}-bin-hadoop3.tgz"
    dest: /tmp/spark.tgz
    mode: "0644"

- name: Extract Spark
  ansible.builtin.unarchive:
    src: /tmp/spark.tgz
    dest: /opt
    remote_src: true
    creates: "/opt/spark-{{ spark_version }}-bin-hadoop3"

- name: Symlink /opt/spark
  ansible.builtin.file:
    src: "/opt/spark-{{ spark_version }}-bin-hadoop3"
    dest: "{{ spark_root }}"
    state: link
    force: true

- name: Ensure jars directory
  ansible.builtin.file:
    path: "{{ spark_jars_dir }}"
    state: directory
    mode: "0755"

- name: Download Iceberg Spark runtime
  ansible.builtin.get_url:
    url: "https://repo1.maven.org/maven2/org/apache/iceberg/iceberg-spark-runtime-3.5_2.12/{{ iceberg_spark_runtime_version }}/iceberg-spark-runtime-3.5_2.12-{{ iceberg_spark_runtime_version }}.jar"
    dest: "{{ spark_jars_dir }}/iceberg-spark-runtime-3.5_2.12-{{ iceberg_spark_runtime_version }}.jar"
    mode: "0644"

- name: Download PostgreSQL JDBC
  ansible.builtin.get_url:
    url: "https://repo1.maven.org/maven2/org/postgresql/postgresql/{{ pg_jdbc_version }}/postgresql-{{ pg_jdbc_version }}.jar"
    dest: "{{ spark_jars_dir }}/postgresql-{{ pg_jdbc_version }}.jar"
    mode: "0644"

- name: Download spark-hadoop-cloud (S3A deps aligned to Spark)
  ansible.builtin.get_url:
    url: "https://repo1.maven.org/maven2/org/apache/spark/spark-hadoop-cloud_2.12/{{ spark_version }}/spark-hadoop-cloud_2.12-{{ spark_version }}.jar"
    dest: "{{ spark_jars_dir }}/spark-hadoop-cloud_2.12-{{ spark_version }}.jar"
    mode: "0644"

- name: Create Spark conf directory
  ansible.builtin.file:
    path: "{{ spark_root }}/conf"
    state: directory
    mode: "0755"

- name: Write spark-defaults.conf
  ansible.builtin.template:
    src: spark-defaults.conf.j2
    dest: "{{ spark_root }}/conf/spark-defaults.conf"
    mode: "0644"

- name: Import MinIO TLS cert into Java truststore on Spark nodes
  ansible.builtin.shell: "openssl s_client -connect {{ minio_primary_host }}:{{ minio_api_port }} -servername {{ minio_cert_common_name }} < /dev/null 2>/dev/null | openssl x509 -outform PEM"
  register: minio_cert_chain

- name: Write MinIO cert to temp file
  ansible.builtin.copy:
    dest: /tmp/minio-public.crt
    mode: "0644"
    content: "{{ minio_cert_chain.stdout }}"

- name: Import MinIO cert if not already present
  ansible.builtin.shell: >
    keytool -list -keystore "{{ java_cacerts_path }}" -storepass "{{ java_cacerts_pass }}" -alias "{{ minio_cert_alias }}" ||\
    keytool -importcert -noprompt -trustcacerts\
    -alias "{{ minio_cert_alias }}"\
    -file /tmp/minio-public.crt\
    -keystore "{{ java_cacerts_path }}"\
    -storepass "{{ java_cacerts_pass }}"

- name: Configure Spark Standalone master (only on master host)
  ansible.builtin.template:
    src: spark-env.sh.j2
    dest: "{{ spark_root }}/conf/spark-env.sh"
    mode: "0755"
  when: "'spark_master' in group_names"

- name: Create spark-master.service
  ansible.builtin.template:
    src: spark-master.service.j2
    dest: /etc/systemd/system/spark-master.service
    mode: "0644"
  when: "'spark_master' in group_names"

- name: Reload and start Spark master
  ansible.builtin.systemd:
    daemon_reload: true
    name: spark-master
    state: started
    enabled: true
  when: "'spark_master' in group_names"

- name: Configure Spark Standalone workers (all nodes)
  ansible.builtin.template:
    src: spark-worker.service.j2
    dest: /etc/systemd/system/spark-worker.service
    mode: "0644"
  when: "'spark_workers' in group_names"

- name: Reload and start Spark worker
  ansible.builtin.systemd:
    daemon_reload: true
    name: spark-worker
    state: started
    enabled: true
  when: "'spark_workers' in group_names"

- name: Drop on-demand spark-submit job script
  ansible.builtin.file:
    path: "{{ spark_job_dir }}"
    state: directory
    mode: "0755"

- name: Drop run_employee_job.sh
  ansible.builtin.template:
    src: run_employee_job.sh.j2
    dest: "{{ spark_job_script }}"
    mode: "0755"