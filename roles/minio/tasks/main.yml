---
- name: Download MinIO server
  ansible.builtin.get_url:
    url: "{{ minio_bin_url }}"
    dest: /usr/local/bin/minio
    mode: "0755"

- name: Create /etc/minio.env
  ansible.builtin.template:
    src: minio.env.j2
    dest: /etc/minio.env
    mode: "0640"

- name: Create systemd unit for MinIO
  ansible.builtin.template:
    src: minio.service.j2
    dest: /etc/systemd/system/minio.service
    mode: "0644"

- name: Reload systemd
  ansible.builtin.systemd:
    daemon_reload: true

- name: Enable & start MinIO
  ansible.builtin.systemd:
    name: minio
    state: started
    enabled: true

- name: Download mc client
  ansible.builtin.get_url:
    url: "{{ mc_bin_url }}"
    dest: /usr/local/bin/mc
    mode: "0755"

- name: Wait for MinIO API to be reachable (HTTP or HTTPS health)
  ansible.builtin.uri:
    url: "http://localhost:{{ minio_api_port }}/minio/health/ready"
    method: GET
  register: minio_health
  retries: 30
  delay: 2
  until: minio_health.status in [200, 301, 302, 403]

- name: Configure mc alias
  ansible.builtin.shell: |
    mc alias set localminio http://127.0.0.1:{{ minio_api_port }} {{ minio_root_user }} {{ minio_root_password }}
  args:
    creates: /root/.mc

- name: Create iceberg warehouse bucket
  ansible.builtin.shell: |
    mc ls localminio/{{ minio_bucket }} || mc mb localminio/{{ minio_bucket }}

- name: Create MinIO cert dirs
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "{{ '0700' if item.endswith('/private') else '0755' }}"
  loop:
    - "{{ minio_cert_dir }}"
    - "{{ minio_cert_dir }}/public"
    - "{{ minio_cert_dir }}/private"

- name: Install provided TLS cert/key (if not self-signed)
  when: enable_minio_tls and (not minio_tls_use_self_signed)
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  loop:
    - { src: "{{ minio_public_crt_src }}", dest: "{{ minio_cert_dir }}/public.crt", mode: "0644" }
    - { src: "{{ minio_private_key_src }}", dest: "{{ minio_cert_dir }}/private.key", mode: "0600" }

- name: Generate self-signed cert for MinIO (per node)
  when: enable_minio_tls and minio_tls_use_self_signed
  block:
    - name: Write OpenSSL config with SANs
      ansible.builtin.copy:
        dest: "{{ openssl_conf_path }}"
        mode: "0644"
        content: |
          [req]
          default_bits       = 4096
          prompt             = no
          default_md         = sha256
          req_extensions     = req_ext
          distinguished_name = dn

          [dn]
          CN = {{ minio_cert_common_name }}

          [req_ext]
          subjectAltName = @alt_names

          [alt_names]
          {% for n in minio_cert_alt_names %}
          DNS.{{ loop.index }} = {{ n }}
          {% endfor %}

    - name: Generate key
      ansible.builtin.command: "openssl genrsa -out {{ minio_cert_dir }}/private.key 4096"
      args:
        creates: "{{ minio_cert_dir }}/private.key"

    - name: Generate CSR
      ansible.builtin.command: >
        openssl req -new -key {{ minio_cert_dir }}/private.key
        -out {{ minio_cert_dir }}/minio.csr
        -config {{ openssl_conf_path }}
      args:
        creates: "{{ minio_cert_dir }}/minio.csr"

    - name: Self-sign certificate
      ansible.builtin.command: >
        openssl x509 -req -in {{ minio_cert_dir }}/minio.csr
        -signkey {{ minio_cert_dir }}/private.key
        -out {{ minio_cert_dir }}/public.crt
        -days 825
        -extfile {{ openssl_conf_path }} -extensions req_ext
      args:
        creates: "{{ minio_cert_dir }}/public.crt"

- name: Restart MinIO to pick up TLS
  ansible.builtin.systemd:
    name: minio
    state: restarted
    enabled: true
